from swo_aws_extension.flows.jobs.billing_journal.line_processors.credits import (
    GenerateCreditProviderDiscountJournalLines,
    GenerateCreditsJournalLines,
)
from swo_aws_extension.flows.jobs.billing_journal.line_processors.marketplace import (
    GenerateMarketplaceJournalLines,
)
from swo_aws_extension.flows.jobs.billing_journal.line_processors.other_services import (
    GenerateOtherServicesJournalLines,
)
from swo_aws_extension.flows.jobs.billing_journal.line_processors.saving_plans import (
    GenerateSavingPlansIncentivateJournalLines,
    GenerateSavingPlansJournalLines,
)
from swo_aws_extension.flows.jobs.billing_journal.line_processors.support import (
    GenerateSupportDevelopmentJournalLines,
    GenerateSupportEnterpriseJournalLines,
    GenerateSupportJournalLines,
)
from swo_aws_extension.flows.jobs.billing_journal.line_processors.usage import (
    GenerateUpfrontIncentivateJournalLines,
    GenerateUpfrontJournalLines,
    GenerateUsageIncentivateJournalLines,
    GenerateUsageJournalLines,
)


class JournalProcessorDispatcher:
    """Dispatcher for journal line processors based on itemSku."""

    def __init__(self, processors):
        self.processors = list(processors)

    @classmethod
    def build(cls, config):
        """Builds a dispatcher using the provided config."""
        tolerance = config.billing_discount_tolerance_rate
        processors = [
            GenerateMarketplaceJournalLines(tolerance),
            GenerateUsageJournalLines(tolerance, config.billing_discount_base),
            GenerateUsageIncentivateJournalLines(tolerance, config.billing_discount_incentivate),
            GenerateUpfrontJournalLines(tolerance, config.billing_discount_base),
            GenerateUpfrontIncentivateJournalLines(tolerance, config.billing_discount_incentivate),
            GenerateSavingPlansJournalLines(tolerance, config.billing_discount_base),
            GenerateSavingPlansIncentivateJournalLines(
                tolerance, config.billing_discount_incentivate
            ),
            GenerateOtherServicesJournalLines(tolerance, 0),
            GenerateSupportJournalLines(tolerance, config.billing_discount_base),
            GenerateSupportEnterpriseJournalLines(
                tolerance, config.billing_discount_support_enterprise
            ),
            GenerateSupportDevelopmentJournalLines(tolerance, 0),
            GenerateCreditsJournalLines(tolerance, 0),
            GenerateCreditProviderDiscountJournalLines(tolerance, 0),
        ]
        return cls(processors)

    def process(self, item_sku, account_id, account_metrics, journal_details, account_invoices):
        """Process the item SKU using the appropriate processors.

        Args:
            item_sku (str): The item SKU to process.
            account_id (str): The account ID.
            account_metrics (dict): Metrics related to the account.
            journal_details (dict): Details for the journal entry.
            account_invoices (dict): Invoices related to the account.

        Returns:
            list: List of journal lines generated by the processors.
        """
        journal_lines = []
        for processor in self.processors:
            if processor.can_process(item_sku):
                journal_lines.extend(
                    processor.process(
                        account_id, account_metrics, journal_details, account_invoices
                    )
                )
        return journal_lines
